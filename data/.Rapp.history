plot(JamesBond[,4:17])
plot(JamesBond[,4:17],pch=19)
plot(JamesBond[,4:17],pch=19,cex=.3)
JamesBond[c(8:9,12:14)] <- "Roger Moore"
levels(JamesBond[,3])
JamesBond
data(JamesBond)
JamesBond[c(8:9,12:14),3] <- "Roger Moore"
levels(JamesBond[,3])
JamesBond
JamesBond[c(8:9,12:14),3] <- factor("Roger Moore")
levels(JamesBond[,3])
(JamesBond[,3])
?levels
unique(JamesBond[,3])
levels(JamesBond[,3]) <- unique(JamesBond[,3])
as.character(JamesBond[,3])
JamesBond[,3] <- as.character(JamesBond[,3])#
JamesBond[,3] <- as.factor(JamesBond[,3])
levels(JamesBond[,3])
JamesBond
JamesBond[,3] <- as.character(JamesBond[,3])#
JamesBond[,3] <- as.factor(JamesBond[,3])
out <- lm(World_Adj~Year+Bond+Budget_Adj+US_Adj+Film_Length+Avg_User_IMDB+Avg_User_Rtn_Tom,data=JamesBond)
out
summary(out)
out <- lm(World_Adj~Year+Bond+Budget_Adj+US_Adj+Film_Length,data=JamesBond)
summary(out)
library(MASS)#
ridge <- lm.ridge (World_Adj~Year+Bond+Budget_Adj+US_Adj+Film_Length+Avg_User_IMDB+Avg_User_Rtn_Tom, data = JamesBond, lambda = seq(0, .1, .001))#
summary(ridge)#
plot(ridge)
ridge <- lm.ridge (World_Adj~Year+Bond+Budget_Adj+US_Adj+Film_Length+Avg_User_IMDB+Avg_User_Rtn_Tom, data = JamesBond, lambda = seq(0, 5, .001))#
summary(ridge)#
plot(ridge)
library(MASS)#
ridge <- lm.ridge (World_Adj~Year+Bond+Budget_Adj+US_Adj+Film_Length+Avg_User_IMDB+Avg_User_Rtn_Tom, data = JamesBond, lambda = seq(0, 10, .001))#
summary(ridge)#
plot(ridge)
select(ridge)
?JamesBond
out
vif
Vif
VIF
library(car)
vif
vif(out)
out <- lm(World_Adj~Year+Bond+Budget_Adj+US_Adj+Film_Length+Avg_User_IMDB+Avg_User_Rtn_Tom,data=JamesBond)
vif(out)
?vif
vif(out)[,3]
vif(out)[,3]^2
ridge
ridge <- lm.ridge (World_Adj~Year+Bond+Budget_Adj+US_Adj+Film_Length+Avg_User_IMDB+Avg_User_Rtn_Tom, data = JamesBond, lambda = seq(0, 5, .001))
ridge
class(ridge)
summary(ridge)
select(ridge)
names(select(ridge))
ridge.c <- lm.ridge (World_Adj~Year+Bond+Budget_Adj+US_Adj+Film_Length+Avg_User_IMDB+Avg_User_Rtn_Tom, data = JamesBond, lambda = 2.288)
ridge.c
summary(ridge.c)
library(glmnet)
?glmnet
names(JamesBond)
ridge.g <- glmnet(x=JamesBond[,c(1,3,5,9:11,)],y=JamesBond[,7],alpha=0)
ridge.g <- glmnet(x=JamesBond[,c(1,3,5,9:11)],y=JamesBond[,7],alpha=0)
class(ridge.c)
ridge.g <- glmnet(x=JamesBond[,c(1,3,5,9:11)],y=JamesBond[,7],alpha=0,lambda=seq(.001,10,length=100))
ridge.g <- glmnet(x=JamesBond[,c(1,3,5,9:11)],y=JamesBond[,7],alpha=0,lambda=seq(.001,10,length=100),standardize=F)
ridge.g <- glmnet(x=JamesBond[,c(1,3,5,9:11)],y=JamesBond[,7],alpha=0,lambda=2.2)
x.g <- model.matrix(~.-1,JamesBond[,c(1,3,5,9:11)])
x.g
ridge.g <- glmnet(x=x.g,y=JamesBond[,7],alpha=0,lambda=2.2)
ridge.g
coef(ridge.g)
ridge.g <- glmnet(x=x.g[,-2],y=JamesBond[,7],alpha=0,lambda=2.2)
coef(ridge.g)
ridge.c
x.g <- model.matrix(~.-1,JamesBond[,c(1,3,5,9:12)])#
ridge.g <- glmnet(x=x.g[,-2],y=JamesBond[,7],alpha=0,lambda=2.2)
coef(ridge.g)
predict(ridge.g)
predict(ridge.g)
#Slide 11#
library(Rfit)#
data(telephone)#
fit <- rfit(calls ~ year, data = telephone)#
summary(fit)#
fit$tauhat#
#
#Slide 13#
plot(telephone,pch=19,ylab="Calls",xlab="Year")#
abline(fit)#
abline(lm(calls ~ year, data = telephone),#
           col = 2, lty = 2)#
legend("topleft", legend = c("R", "LS"),#
           col = 1:2, lty = 1:2)#
#
fitF <- rfit(ffa ~ age + weight + skin,#
                data = ffa)#
fitR <- rfit(ffa ~ skin, data = ffa)#
drop.test(fitF, fitR)#
#
#Slide 14#
plot(fitted.values(fitF), rstudent(fitF), pch=19, xlab="Fitted Values",#
     ylab="Studentized Reisduals",main="Studentized Residuals for Rank Regression Fit")#
abline(h = c(-3, 3),lty=2)#
#
#Slide 15#
qqnorm(residuals(fitF),pch=19,main="Q-Q Plot")#
qqline(residuals(fitF),col=2)
fit2=lm(calls~year,data=telephpone)
fit2=lm(calls~year,data=telephone)
qqnorm(residuals(fit2))
qqline(residuals(fit2),col=2)
plot(telephone)
qqnorm(residuals(fit2))
qqline(residuals(fit2),col=2)
residuals(fit2)
telephone
cbind(telephone,residuals(fit2))
qqnorm(residuals(fitF),pch=19,main="Q-Q Plot")
abline(0,1)
x
x=seq(-5,5,length=1000)
plot(x,x*(.3-(x<0))type="l")
plot(x,x*(.3-(x<0)),type="l")
plot(x,x*(.1-(x<0)),type="l")
plot(x,x*(.99-(x<0)),type="l")
plot(x,x*(.2-(x<0)),type="l")
plot(x,x*(.01-(x<0)),type="l")
rm(list=ls())
ls()
load("/Users/derekyoung/myrpackages/HoRM/data/JamesBond.RData")
ls()
JamesBond
JamesBond[c(8:9,12:14),3] <- factor("Roger Moore")#
JamesBond[,3] <- as.character(JamesBond[,3])#
JamesBond[,3] <- as.factor(JamesBond[,3])
JamesBond
ls()
levels(JamesBond[,3])
getwd()
setwd()
setwd("/Users/derekyoung/myrpackages/HoRM/data/")
save.image("JamesBond.RData")
ls()
rm(.Random.seed)
save.image("JamesBond.RData")
library(spc)
library(qcc)
?qcc
data(orangejuice)
plot(orangjuice)
plot(orangejuice)
plot(orangejuice[,1])
plot(orangejuice[,2])
ls()
rm(orangejuice)
out <- lm(World_Adj~Year+Bond+Budget_Adj+Film_Length+Avg_User_IMDB+Avg_User_Rtn_Tom,data=JamesBond)
out
out <- lm(World_Adj~Year+Bond+Budget_Adj+Film_Length+Avg_User_IMDB+Avg_User_Rtn_Tom,data=JamesBond)#
#
library(MASS)#
ridge <- lm.ridge (World_Adj~Year+Bond+Budget_Adj+Film_Length+Avg_User_IMDB+Avg_User_Rtn_Tom, data = JamesBond, lambda = seq(0, 5, .001))#
summary(ridge)#
plot(ridge)#
#
ridge.c <- lm.ridge (World_Adj~Year+Bond+Budget_Adj+Film_Length+Avg_User_IMDB+Avg_User_Rtn_Tom, data = JamesBond, lambda = 2.288)#
#
library(glmnet)#
ridge.g <- glmnet(x=JamesBond[,c(1,3,5,9:11)],y=JamesBond[,7],alpha=0)#
x.g <- model.matrix(~.-1,JamesBond[,c(1,3,5,9:12)])#
ridge.g <- glmnet(x=x.g[,-2],y=JamesBond[,7],alpha=0,lambda=2.2)
autoplot(ridge.g)
library(ggfortify)
plot(ridge)
class(ridge)
?plot.ridgelm
ridge
?cor.test
x <- c(44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1)#
y <- c( 2.6,  3.1,  2.5,  5.0,  3.6,  4.0,  5.2,  2.8,  3.8)#
#
##  The alternative hypothesis of interest is that the#
##  Hunter L value is positively associated with the panel score.#
#
cor.test(x, y)
cor.test
cor(x,y)
cor(x,y)+c(-1,1)*qnorm(0.975)/sqrt(6)
qnorm(0.975)
?cor.test
load("/Users/derekyoung/Documents/Derek's MacBook/Documents/Short Papers/Turkey Traffic Accidents/Traffic_Out.RData")
ls()
load("/Users/derekyoung/Documents/Derek's MacBook/Documents/Short Papers/Turkey Traffic Accidents/Traffic_Analysis.RData")
ls()
?predict.nls
fm <- nls(demand ~ SSasympOrig(Time, A, lrc), data = BOD)#
predict(fm)
fm <- nls(demand ~ SSasympOrig(Time, A, lrc), data = BOD)#
predict(fm,se.fit=T)
x
x1=rnorm(100)
x1=rnorm(10)
x2=as.factor(c(rep(1,9),2))
X=data.frame(x1,x2,y=rnorm(10))
X
lm(y)
lm(y~.,data=X)
out=lm(y~.,data=X)
out$residuals
XX=X[,-3]
XX%*%solve(t(XX)%*%XX)%*%t(XX)
XX=matrix(X[,-3])
XX%*%solve(t(XX)%*%XX)%*%t(XX)
t(XX)%*%solve(t(XX)%*%XX)%*%(XX)
t(XX)
X
XX=as.matrix(X[,-3])
XX
XX=as.matrix(X[,-3])
X=data.frame(x1,x2==1,y=rnorm(10))
X
X=data.frame(x1,x2=(x2==1),y=rnorm(10))
X
XX=as.matrix(X[,-3])
XX
t(XX)%*%solve(t(XX)%*%XX)%*%(XX)
t(XX)%*%solve(XX%*%t(XX))%*%(XX)
t(XX)%*%ginv(XX%*%t(XX))%*%(XX)
ginv(XX%*%t(XX))%*%(XX)
solve(XX%*%t(XX))%*%(XX)
ginv(XX%*%t(XX))%*%(XX)
XX=cbind(1,XX)
XX
ginv(XX%*%t(XX))%*%(XX)
solve(XX%*%t(XX))%*%(XX)
ginv(XX%*%t(XX))%*%(XX)
t(ginv(XX%*%t(XX))%*%(XX))%*%cbind(X[,3])
lm(y~.,data=X)
lm(y~x1,data=X)
library(car)
out=lm(y~x1,data=X)
studres(out)
(out$residuals)/sd(out$residuals)
stdres(out)
t(ginv(XX%*%t(XX))%*%(XX))
t(XX)%*%t(ginv(XX%*%t(XX))%*%(XX))
t(XX)%*%t(ginv(XX%*%t(XX))%*%(XX)
t(ginv(XX%*%t(XX))%*%(XX))
ginv(XX%*%t(XX))%*%(XX)
t(XX)%*%ginv(XX%*%t(XX))%*%(XX)
XXX=XX[,-3]
XXX
t(XXX)%*%solve(XXX%*%t(XXX))%*%(XXX)
solve(XXX%*%t(XXX))
(XXX%*%t(XXX))
XXX
t(XXX)%*%solve(t(XXX)%*%XXX)%*%(XXX)
(XXX)%*%solve(t(XXX)%*%XXX)%*%t(XXX)
(XX)%*%ginv(t(XX)%*%XX)%*%t(XX)
XX
X
X <- cbind(X,x3=x1*2+rnorm(10,0,.001))
X
X
lm(y~x1+x3,data=X)
vif(lm(y~x1+x3,data=X))
vif(lm(y~.,data=X))
(XX)%*%ginv(t(XX)%*%XX)%*%t(XX)
trace()(XX)%*%ginv(t(XX)%*%XX)%*%t(XX))
trace((XX)%*%ginv(t(XX)%*%XX)%*%t(XX))
tr((XX)%*%ginv(t(XX)%*%XX)%*%t(XX))
diag((XX)%*%ginv(t(XX)%*%XX)%*%t(XX))
?ginv
?t.test
t.test(rnorm(4),rnorm(3))
t.test(rnorm(4),rnorm(1))
t.test(rnorm(4),rnorm(2))
rm(list=ls())
data(JamesBond, package = "HoRM")#
#
bond.mod <- JamesBond$US_Gross/1e+06#
year <- JamesBond$Year#
pop.mod <- nls(bond.mod ~ beta0/(1 + exp(beta1 + beta2 * (year - 1962))), start = list(beta0 = 1000, #
    beta1 = 4, beta2 = -0.05), trace = F)#
summary(pop.mod)#
#
bond.res <- nlsResiduals(pop.mod)#
bond.df <- data.frame(year = year, bond.mod = bond.mod, fits = bond.res$resi2[, 1], #
    res = bond.res$resi2[, 2])#
#
new.x <- seq(1962, 2015, len = 1000)#
df2 <- data.frame(year = new.x)#
df2$bond.mod <- predict(pop.mod, list(year = new.x))#
#
ggplot(data = bond.df, aes(x = year, y = bond.mod)) + geom_point(size = 3) + geom_line(data = df2, #
    aes(x = year, y = bond.mod), col = 2) + ggtitle("James Bond Data") + theme(text = element_text(size = 20)) + #
    xlab("Year") + ylab("U.S. Gross in Millions of Dollars (Unadjusted)")#
#
res <- data.frame(x = fitted.values(orl.nl2), y = resid(orl.nl2))#
ggplot(bond.df, aes(x = fits, y = res)) + geom_point(size = 3) + theme(text = element_text(size = 20)) + #
    xlab("Fitted Values") + ylab("Standardized Residuals") + geom_hline(yintercept = 0, #
    color = 1, size = 0.6) + ggtitle("Standardized Residuals") + ylim(-3, 3) + geom_hline(yintercept = c(-3, #
    3), linetype = "dashed")#
#
round(summary(pop.mod)$coefficients[, 1] - qt(1 - (0.05/6), 21) * summary(pop.mod)$coefficients[, #
    2], 3)#
round(summary(pop.mod)$coefficients[, 1] + qt(1 - (0.05/6), 21) * summary(pop.mod)$coefficients[, #
    2], 3)
library(ggplot2)#
library(HoRM)#
library(nlstools)
data(JamesBond, package = "HoRM")#
#
bond.mod <- JamesBond$US_Gross/1e+06#
year <- JamesBond$Year#
pop.mod <- nls(bond.mod ~ beta0/(1 + exp(beta1 + beta2 * (year - 1962))), start = list(beta0 = 1000, #
    beta1 = 4, beta2 = -0.05), trace = F)#
summary(pop.mod)#
#
bond.res <- nlsResiduals(pop.mod)#
bond.df <- data.frame(year = year, bond.mod = bond.mod, fits = bond.res$resi2[, 1], #
    res = bond.res$resi2[, 2])#
#
new.x <- seq(1962, 2015, len = 1000)#
df2 <- data.frame(year = new.x)#
df2$bond.mod <- predict(pop.mod, list(year = new.x))#
#
ggplot(data = bond.df, aes(x = year, y = bond.mod)) + geom_point(size = 3) + geom_line(data = df2, #
    aes(x = year, y = bond.mod), col = 2) + ggtitle("James Bond Data") + theme(text = element_text(size = 20)) + #
    xlab("Year") + ylab("U.S. Gross in Millions of Dollars (Unadjusted)")#
#
res <- data.frame(x = fitted.values(orl.nl2), y = resid(orl.nl2))#
ggplot(bond.df, aes(x = fits, y = res)) + geom_point(size = 3) + theme(text = element_text(size = 20)) + #
    xlab("Fitted Values") + ylab("Standardized Residuals") + geom_hline(yintercept = 0, #
    color = 1, size = 0.6) + ggtitle("Standardized Residuals") + ylim(-3, 3) + geom_hline(yintercept = c(-3, #
    3), linetype = "dashed")#
#
round(summary(pop.mod)$coefficients[, 1] - qt(1 - (0.05/6), 21) * summary(pop.mod)$coefficients[, #
    2], 3)#
round(summary(pop.mod)$coefficients[, 1] + qt(1 - (0.05/6), 21) * summary(pop.mod)$coefficients[, #
    2], 3)
rm(list=ls())
ls()
load("/Users/derekyoung/myrpackages/HoRM/data/JamesBond.RData")
ls()
JamesBond
JamesBond$Budget
JamesBond$Budget <- JamesBond$Budget*1000
JamesBond
JamesBond$US_Gross=JamesBond$US_Gross/1000
JamesBond$US_Gross
JamesBond
rm(list=ls())
load("/Users/derekyoung/myrpackages/HoRM/data/JamesBond.RData")
ls()
JamesBond
JamesBond$Budget <- JamesBond$Budget*1000
rm(.RandomSeed)
getwd()
save.image("JamesBond.RData")
ls()
levels(JamesBond$Bond)
#################################################################
#################################################################
#################################################################
### Unit #4 Examples (R)#
### By Derek Young#
#################################################################
#################################################################
#################################################################
#
#################################################################
### Contrasts and corresponding confidence intervals for the#
### cereal packaging experiment#
#################################################################
#
library(multcomp)#
#
des1 <- c(11,17,16,14,15)#
des2 <- c(12,10,15,19,11)#
des3 <- c(23,20,18,17)#
des4 <- c(27,33,22,26,28)#
#
cereal <- data.frame(design=as.factor(c(rep("PD1",5),#
                                        rep("PD2",5),rep("PD3",4),rep("PD4",5))),#
                     sales=c(des1,des2,des3,des4))#
#
cereal <- within(cereal, design <- relevel(design, ref="PD1"))#
#
out.lm <- lm(sales~design,data=cereal)#
out <- lm(sales~design-1,data=cereal) #Must use for my SSC function below.#
#
MSE <- anova(out)$"Mean Sq"[2]#
#
n <- c(5,5,4,5)#
#
L1 <- matrix(c(1/2,1/2,-1/2,-1/2),1)#
L.1 <- glht(out,linfct=mcp(design=L1))#
summary(L.1)#
#
L2 <- matrix(c(1,-1,0,0),1)#
L.2 <- glht(out,linfct=mcp(design=L2))#
summary(L.2)#
#
L3 <- matrix(c(1/2,-1/2,1/2,-1/2),1)#
L.3 <- glht(out,linfct=mcp(design=L3))#
summary(L.3)#
#
L4 <- matrix(c(3/4,-1/4,-1/4,-1/4),1)#
L.4 <- glht(out,linfct=mcp(design=L4))#
summary(L.4)#
#
#Alternatively, we can calculate all of the contrasts together#
L5 <- rbind(L1,L2,L3,L4)#
L.5 <- glht(out,linfct=mcp(design=L5))#
summary(L.5)#
#
#Individual 95% confidence intervals#
confint(L.1,level=0.95)#
confint(L.2,level=0.95)#
confint(L.3,level=0.95)#
confint(L.4,level=0.95)#
#
confint(L.5,level=0.95)#
#
#Bonferroni joint confidence intervals (alpha_E = 0.05)#
confint(L.5,level=1-(.05/4),calpha=univariate_calpha("bonferroni"))#
#
#Alternatively, calculate bonferroni joint confidence intervals for each contrast#
confint(L.1,level=1-(.05/4),calpha=univariate_calpha("bonferroni"))#
confint(L.2,level=1-(.05/4),calpha=univariate_calpha("bonferroni"))#
confint(L.3,level=1-(.05/4),calpha=univariate_calpha("bonferroni"))#
confint(L.4,level=1-(.05/4),calpha=univariate_calpha("bonferroni"))#
SSC <- function(L,n){#
  coef(summary(L)$test)^2/sum((summary(L)$linfct)^2/n)#
}#
#
SSC1 <- SSC(L.1,n[1])#
SSC2 <- SSC(L.2,n[2])#
SSC3 <- SSC(L.3,n[3])#
SSC4 <- SSC(L.4,n[4])#
#
c(SSC1,SSC2,SSC3,SSC4)#
#
#Not all are pairwise orthogonal, so the following is not 0.#
sum(c(SSC1,SSC2,SSC3,SSC4))-anova(out.lm)$"Sum Sq"[1]#
#
Scheffe <- function(L,n,alpha=0.05){#
  t <- length(L$linfct)#
  N <- sum(n)#
  coef(summary(L)$test)+c(-1,1)*sqrt((t-1)*qf(1-alpha,t-1,N-t))*summary(L)$test$sigma#
}#
#
Scheffe(L.1,n=n,alpha=0.05)#
Scheffe(L.2,n=n,alpha=0.05)#
Scheffe(L.3,n=n,alpha=0.05)#
Scheffe(L.4,n=n,alpha=0.05)#
#################################################################
### ANOVA, contrasts, and corresponding confidence intervals for#
### the meat packaging experiment#
#################################################################
#
library(multcomp)#
library(agricolae)#
#
meat.f <- as.factor(c(rep("Commercial",3),rep("Vacuum",3),#
                      rep("Mixed",3),rep("CO2",3)))#
meat <- data.frame(log.count=c(7.66,6.98,7.80,5.26,5.44,5.80,#
                               7.41,7.33,7.04,3.51,2.91,3.66),treatment=meat.f)#
#
meat$treatment <- relevel(meat$treatment,ref="Mixed")#
meat$treatment <- relevel(meat$treatment,ref="Vacuum")#
meat$treatment <- relevel(meat$treatment,ref="Commercial")#
#
out <- aov(log.count~treatment,data=meat)#
anova(out)#
#
contr <- rbind("Contrast 1"=c(1,-1/3,-1/3,-1/3),#
               "Contrast 2"=c(0,1,-1/2,-1/2),#
               "Contrast 3"=c(0,0,1,-1))#
L <- glht(out,linfct=mcp(treatment=contr))#
summary(L,test=adjusted("none"))#
confint(L,level=0.95,calpha = univariate_calpha())#
summary(L,test=adjusted("bonferroni"))#
confint(L,level=1-(.05/3),calpha = univariate_calpha())#
#Note that the below uses a numerical routine to solve for the experimentwise error rate, so#
#the result is NOT exactly the same as applying the direct Bonferroni adjustment.#
set.seed(100);confint(L,level=0.95,adjust.method="bonferroni")#
#
#################################################################
### Multiple comparisons for the meat packaging experiment#
#################################################################
#
library(agricolae)#
#
means <- c(by(meat[,1],meat[,2],mean))#
best.ind <- which.max(means)#
worst.ind <- which.min(means)#
#
out.best <- lm(log.count~treatment,data=meat)#
#
meat.worst <- meat#
meat.worst$treatment <- relevel(meat.worst$treatment,ref="CO2")#
out.worst <- lm(log.count~treatment,data=meat.worst)#
#
meat.ctl <- meat#
meat.ctl$treatment <- relevel(meat.ctl$treatment,ref="Vacuum")#
out.ctl <- lm(log.count~treatment,data=meat.ctl)#
#
const <- function(out){#
  out$confint[,2] <- out$confint[,2]*(out$confint[,2]<0)#
  if(any(out$confint[,2]==-Inf))  out$confint[which(out$confint[,2]==-Inf),2] = 0#
  out$confint[,3] <- out$confint[,3]*(out$confint[,3]>0|out$confint[,3]!=Inf)#
  if(any(out$confint[,3]==Inf))  out$confint[which(out$confint[,3]==Inf),3] = 0#
  out#
}#
#
MCB <- glht(out.best, linfct=mcp(treatment="Dunnett"),#
            alternative="greater")#
MCB.CI <- const(confint(MCB))#
MCB.CI#
#
MCW <- glht(out.worst, linfct=mcp(treatment="Dunnett"),#
            alternative="less")#
MCW.CI <- const(confint(MCW))#
MCW.CI#
#
MCC <- glht(out.ctl, linfct=mcp(treatment="Dunnett"))#
MCC.CI <- confint(MCC)#
MCC.CI#
#
newplot <- function(x.sci,...){#
  plot(x.sci,yaxt="n",xlab="Difference")#
  rn <- rownames(x.sci$confint)#
  means <- x.sci$confint[,1]#
  ind <- length(rn):1#
  text(means,ind,labels=rn,pos=3,col=2,...)#
}#
#
TukeyHSD(aov(log.count~treatment,data=meat))#
#
meat.aov <- anova(lm(log.count~treatment,data=meat))#
out.lsd <- LSD.test(meat$log.count,meat$treatment,#
                    tail(meat.aov$"Df",1),tail(meat.aov$"Mean Sq",1),console=TRUE)#
out.lsd#
#
out.snk <- SNK.test(meat$log.count,meat$treatment,#
                    tail(meat.aov$"Df",1),tail(meat.aov$"Mean Sq",1),console=TRUE)#
out.snk#
#
out.duncan <- duncan.test(meat$log.count,meat$treatment,#
                          tail(meat.aov$"Df",1),tail(meat.aov$"Mean Sq",1),console=TRUE)#
out.duncan
?LSD.test
?JamesBond
